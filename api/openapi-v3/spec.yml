---
openapi: "3.0.0"
info:
  version: 1.0.0
  title: Mancala API
  license:
    name: MIT
servers:
  - url: https://mancala.herokuapp.com/v1/
paths:
  /games:
    post:
      summary: Create game
      operationId: CreateGame
      tags:
        - Games
      requestBody:
        $ref: "#/components/requestBodies/NewGameBody"
      responses:
        "201":
          $ref: "#/components/responses/GameResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"

  /games/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid

    get:
      summary: Show game
      description: Retrieves a game
      operationId: ShowGame
      tags:
        - Games
      responses:
        "200":
          $ref: "#/components/responses/GameResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"

    patch:
      summary: Update game
      description: Updates a game by playing the corresponding next turn
      operationId: updateGame
      tags:
        - Games
      requestBody:
        $ref: "#/components/requestBodies/GameUpdateBody"

      responses:
        "200":
          $ref: "#/components/responses/GameResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "500":
          $ref: "#/components/responses/InternalServerErrorResponse"

components:
  requestBodies:
    NewGameBody:
      description: A JSON object containing information to create a new game
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - player1
              - player2
            properties:
              player1:
                type: string
              player2:
                type: string

    GameUpdateBody:
      description: A JSON object containing information to update a game
      required: true
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            required:
              - pit_index
            properties:
              pit_index:
                type: integer
                minimum: 0
                maximum: 5
                format: int32

  responses:
    GameResponse:
      description: Game response
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Game"
          example:
            id: "37d5b35c-f90e-4136-90f8-500d6c43b1bf"
            turn: 0
            result: 3
            board_side1:
              pits: [6, 6, 6, 6, 6, 6]
              store: 0
              player:
                name: Player1
                score: 0
            board_side2:
              pits: [6, 6, 6, 6, 6, 6]
              store: 0
              player:
                name: Player2
                score: 0

    NotFoundResponse:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"

    NoContentResponse:
      description: Not content
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"

    BadRequestResponse:
      description: Unprocessable entity
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"

    InternalServerErrorResponse:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"

  schemas:
    Result:
      type: integer
      description: The result of the game. `0` = `Undefined`, `1` = `Player1Wins`, `2` = `Player2Wins`, `3` = `Tie`.
      enum:
        - 0
        - 1
        - 2
        - 3
    Turn:
      type: integer
      description: The turn that needs to play next. `0` = `Player1`, `1` = `Player2`.
      enum:
        - 0
        - 1

    Player:
      type: object
      properties:
        name:
          description: The name of the player
          type: string
        score:
          description: The score of the player
          type: integer
          format: int32

    BoardSide:
      type: object
      description: A side of the board
      properties:
        pits:
          description: The pits of the board side
          type: array
          maxItems: 6
          items:
            type: integer
            minimum: 0
            format: int32
        store:
          description: The store (big pit) of the board side
          type: integer
        player:
          allOf:
          - description: The player assigned to the board side
          - $ref: "#/components/schemas/Player"

    Game:
      type: object
      properties:
        id:
          description: The id of the game
          type: string
        result:
          $ref: "#/components/schemas/Result"
        turn:
          $ref: "#/components/schemas/Turn"
        board_side1:
          allOf:
            - description: The upper side of the game board
            - $ref: "#/components/schemas/BoardSide"
        board_side2:
          allOf:
            - description: The lower side of the game board
            - $ref: "#/components/schemas/BoardSide"

    Problem:
      type: object
      required:
        - type
        - title
        - status
        - detail
      properties:
        type:
          type: string
        title:
          type: string
        status:
          type: integer
          format: int64
        detail:
          type: string
        violations:
          $ref: "#/components/schemas/ArrayOfViolations"

    ArrayOfViolations:
      type: array
      items:
        $ref: "#/components/schemas/Violation"

    Violation:
      type: object
      required:
        - name
        - reason
      properties:
        name:
          type: string
        reason:
          type: string
